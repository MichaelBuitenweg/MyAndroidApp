// Generated by view binder compiler. Do not edit!
package com.example.myandroidapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.myandroidapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemCarBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button buttonDelete;

  @NonNull
  public final View colorSwatch;

  @NonNull
  public final TextView textLicense;

  @NonNull
  public final TextView textModel;

  @NonNull
  public final TextView textName;

  private ItemCarBinding(@NonNull LinearLayout rootView, @NonNull Button buttonDelete,
      @NonNull View colorSwatch, @NonNull TextView textLicense, @NonNull TextView textModel,
      @NonNull TextView textName) {
    this.rootView = rootView;
    this.buttonDelete = buttonDelete;
    this.colorSwatch = colorSwatch;
    this.textLicense = textLicense;
    this.textModel = textModel;
    this.textName = textName;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemCarBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemCarBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_car, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemCarBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonDelete;
      Button buttonDelete = ViewBindings.findChildViewById(rootView, id);
      if (buttonDelete == null) {
        break missingId;
      }

      id = R.id.colorSwatch;
      View colorSwatch = ViewBindings.findChildViewById(rootView, id);
      if (colorSwatch == null) {
        break missingId;
      }

      id = R.id.textLicense;
      TextView textLicense = ViewBindings.findChildViewById(rootView, id);
      if (textLicense == null) {
        break missingId;
      }

      id = R.id.textModel;
      TextView textModel = ViewBindings.findChildViewById(rootView, id);
      if (textModel == null) {
        break missingId;
      }

      id = R.id.textName;
      TextView textName = ViewBindings.findChildViewById(rootView, id);
      if (textName == null) {
        break missingId;
      }

      return new ItemCarBinding((LinearLayout) rootView, buttonDelete, colorSwatch, textLicense,
          textModel, textName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
